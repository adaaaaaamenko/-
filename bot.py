import os
import json
from datetime import datetime, timedelta
from telegram import Update, ChatPermissions
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# ==============================
# üîπ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
# ==============================

TOKEN = os.environ.get("BOT_TOKEN")  # –¢–æ–∫–µ–Ω –±–µ—Ä–µ–º–æ –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ Render
TECH_ADMINS = [123456789, 987654321]  # ID –¥–≤–æ—Ö "—Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö" –∞–¥–º—ñ–Ω—ñ–≤, —è–∫–∏—Ö –Ω–µ –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏

ADMINS_FILE = "admins.json"

# –Ø–∫—â–æ —Ñ–∞–π–ª –∑ –∞–¥–º—ñ–Ω–∞–º–∏ –Ω–µ —ñ—Å–Ω—É—î ‚Äî —Å—Ç–≤–æ—Ä—é—î–º–æ –π–æ–≥–æ
if not os.path.exists(ADMINS_FILE):
    with open(ADMINS_FILE, "w", encoding="utf-8") as f:
        json.dump(TECH_ADMINS, f)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∞–¥–º—ñ–Ω—ñ–≤
def load_admins():
    with open(ADMINS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∞–¥–º—ñ–Ω—ñ–≤
def save_admins(admins):
    with open(ADMINS_FILE, "w", encoding="utf-8") as f:
        json.dump(admins, f)

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω
def is_admin(user_id):
    return user_id in load_admins()

# ==============================
# üîπ –ü–∞—Ä—Å–µ—Ä —á–∞—Å—É (1h, 10m, 2d)
# ==============================
def parse_duration(duration_str):
    try:
        unit = duration_str[-1]
        value = int(duration_str[:-1])
        if unit == "m":
            return value * 60
        elif unit == "h":
            return value * 3600
        elif unit == "d":
            return value * 86400
    except:
        return None
    return None

# ==============================
# üîπ –ö–æ–º–∞–Ω–¥–∏ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó
# ==============================

async def mute(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤.")

    if not update.message.reply_to_message:
        return await update.message.reply_text("‚ö†Ô∏è –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ —Ö–æ—á–µ—Ç–µ –∑–∞–º'—é—Ç–∏—Ç–∏.")

    if not context.args:
        return await update.message.reply_text("‚è≥ –í–∫–∞–∂—ñ—Ç—å —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 1h, 30m)")

    seconds = parse_duration(context.args[0])
    if not seconds:
        return await update.message.reply_text("‚õî –§–æ—Ä–º–∞—Ç —á–∞—Å—É: 10m, 1h, 2d")

    until = datetime.utcnow() + timedelta(seconds=seconds)
    await context.bot.restrict_chat_member(
        update.effective_chat.id,
        update.message.reply_to_message.from_user.id,
        permissions=ChatPermissions(can_send_messages=False),
        until_date=until
    )
    await update.message.reply_text(f"üîá –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–º'—é—Ç–∏–ª–∏ –Ω–∞ {context.args[0]}")

async def unmute(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤.")

    if not update.message.reply_to_message:
        return await update.message.reply_text("‚ö†Ô∏è –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")

    await context.bot.restrict_chat_member(
        update.effective_chat.id,
        update.message.reply_to_message.from_user.id,
        permissions=ChatPermissions(can_send_messages=True)
    )
    await update.message.reply_text("üîä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ä–æ–∑–º'—é—Ç–∏–ª–∏.")

async def ban(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤.")

    if not update.message.reply_to_message:
        return await update.message.reply_text("‚ö†Ô∏è –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")

    if not context.args:
        return await update.message.reply_text("‚è≥ –í–∫–∞–∂—ñ—Ç—å —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å (1h, 2d) –∞–±–æ 0 –¥–ª—è –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–æ–≥–æ –±–∞–Ω—É.")

    if context.args[0] == "0":
        until = None
    else:
        seconds = parse_duration(context.args[0])
        if not seconds:
            return await update.message.reply_text("‚õî –§–æ—Ä–º–∞—Ç —á–∞—Å—É: 10m, 1h, 2d")
        until = datetime.utcnow() + timedelta(seconds=seconds)

    await context.bot.ban_chat_member(
        update.effective_chat.id,
        update.message.reply_to_message.from_user.id,
        until_date=until
    )
    await update.message.reply_text(f"üö´ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–±–∞–Ω–µ–Ω–æ –Ω–∞ {context.args[0]}")

async def unban(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤.")

    if not context.args:
        return await update.message.reply_text("‚ö†Ô∏è –í–∫–∞–∂—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")

    await context.bot.unban_chat_member(update.effective_chat.id, int(context.args[0]))
    await update.message.reply_text("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ä–æ–∑–±–∞–Ω–µ–Ω–æ.")

async def kick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤.")

    if not update.message.reply_to_message:
        return await update.message.reply_text("‚ö†Ô∏è –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")

    user_id = update.message.reply_to_message.from_user.id
    await context.bot.ban_chat_member(update.effective_chat.id, user_id)
    await context.bot.unban_chat_member(update.effective_chat.id, user_id)
    await update.message.reply_text("üë¢ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∫—ñ–∫–Ω—É–ª–∏.")

# ==============================
# üîπ –°–∏—Å—Ç–µ–º–∞ –∞–¥–º—ñ–Ω—ñ–≤
# ==============================

async def list_admins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admins = load_admins()
    text = "üëÆ‚Äç‚ôÇÔ∏è –°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ–≤:\n" + "\n".join(str(a) for a in admins)
    await update.message.reply_text(text)

async def add_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in TECH_ADMINS:
        return await update.message.reply_text("‚õî –õ–∏—à–µ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –∞–¥–º—ñ–Ω–∏ –º–æ–∂—É—Ç—å –¥–æ–¥–∞–≤–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ–≤.")

    if not context.args:
        return await update.message.reply_text("‚ö†Ô∏è –í–∫–∞–∂—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")

    admins = load_admins()
    new_id = int(context.args[0])
    if new_id not in admins:
        admins.append(new_id)
        save_admins(admins)
        await update.message.reply_text("‚úÖ –ê–¥–º—ñ–Ω–∞ –¥–æ–¥–∞–Ω–æ.")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∞–¥–º—ñ–Ω.")

async def remove_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in TECH_ADMINS:
        return await update.message.reply_text("‚õî –õ–∏—à–µ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –∞–¥–º—ñ–Ω–∏ –º–æ–∂—É—Ç—å –≤–∏–¥–∞–ª—è—Ç–∏ –∞–¥–º—ñ–Ω—ñ–≤.")

    if not context.args:
        return await update.message.reply_text("‚ö†Ô∏è –í–∫–∞–∂—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")

    admins = load_admins()
    rem_id = int(context.args[0])
    if rem_id in TECH_ADMINS:
        return await update.message.reply_text("‚õî –ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –∞–¥–º—ñ–Ω–∞.")
    if rem_id in admins:
        admins.remove(rem_id)
        save_admins(admins)
        await update.message.reply_text("‚úÖ –ê–¥–º—ñ–Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–æ.")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–¥–º—ñ–Ω.")

# ==============================
# üîπ –Ü–Ω—à—ñ –∫–æ–º–∞–Ω–¥–∏
# ==============================

async def rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        with open("rules.txt", "r", encoding="utf-8") as f:
            text = f.read()
        await update.message.reply_text(text)
    except FileNotFoundError:
        await update.message.reply_text("üìÑ –§–∞–π–ª –∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admins = load_admins()
    text = f"üì¢ –†–µ–ø–æ—Ä—Ç –≤—ñ–¥ {update.effective_user.full_name} ({update.effective_user.id}):\n"
    text += " ".join(context.args) if context.args else "(–±–µ–∑ —Ç–µ–∫—Å—Ç—É)"
    for admin_id in admins:
        try:
            await context.bot.send_message(admin_id, text)
        except:
            pass
    await update.message.reply_text("‚úÖ –†–µ–ø–æ—Ä—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.")

async def welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    for member in update.message.new_chat_members:
        await update.message.reply_text(
            f"üëã –í—ñ—Ç–∞—î–º–æ, {member.full_name}!\nüìú –û–∑–Ω–∞–π–æ–º—Ç–µ—Å—å –∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∫–æ–º–∞–Ω–¥–∏ /rules"
        )

# ==============================
# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (Webhook)
# ==============================

def main():
    PORT = int(os.environ.get("PORT", "8443"))
    HOSTNAME = os.environ.get("RENDER_EXTERNAL_HOSTNAME")
    WEBHOOK_URL = f"https://{HOSTNAME}/{TOKEN}"

    app = ApplicationBuilder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥–∏ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó
    app.add_handler(CommandHandler("mute", mute))
    app.add_handler(CommandHandler("unmute", unmute))
    app.add_handler(CommandHandler("ban", ban))
    app.add_handler(CommandHandler("unban", unban))
    app.add_handler(CommandHandler("kick", kick))

    # –°–∏—Å—Ç–µ–º–∞ –∞–¥–º—ñ–Ω—ñ–≤
    app.add_handler(CommandHandler("admins", list_admins))
    app.add_handler(CommandHandler("addadmin", add_admin))
    app.add_handler(CommandHandler("removeadmin", remove_admin))

    # –Ü–Ω—à—ñ –∫–æ–º–∞–Ω–¥–∏
    app.add_handler(CommandHandler("rules", rules))
    app.add_handler(CommandHandler("report", report))
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome))

    print(f"üöÄ –ó–∞–ø—É—Å–∫ webhook –Ω–∞ –ø–æ—Ä—Ç—É {PORT} –∑ URL: {WEBHOOK_URL}")
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TOKEN,
        webhook_url=WEBHOOK_URL,
    )

if __name__ == "__main__":
    main()
