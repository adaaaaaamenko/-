import json
import logging
from datetime import datetime, timedelta

from telegram import (
    Update,
    ChatPermissions,
    ChatMemberAdministrator,
    ChatMemberOwner
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    ChatMemberHandler,
    filters,
)

from config import TOKEN, TECH_ADMINS

# üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# üìÇ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∏–Ω–∞–º—ñ—á–Ω–∏—Ö –∞–¥–º—ñ–Ω—ñ–≤
ADMINS_FILE = 'admins.json'

def load_admins():
    try:
        with open(ADMINS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return []

def save_admins(admins):
    with open(ADMINS_FILE, 'w', encoding='utf-8') as f:
        json.dump(admins, f, indent=2)

def is_admin(user_id: int):
    """üîí –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω–æ–º (—Ç–µ—Ö–Ω—ñ—á–Ω–∏–º –∞–±–æ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–º)."""
    return user_id in TECH_ADMINS or user_id in load_admins()

def is_tech_admin(user_id: int):
    """üîí –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ç–µ—Ö–Ω—ñ—á–Ω–∏–º –∞–¥–º—ñ–Ω–æ–º."""
    return user_id in TECH_ADMINS

# üïì –ü–∞—Ä—Å–µ—Ä —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ: '10m', '2h', '1d'
def parse_duration(duration_str: str) -> int:
    unit = duration_str[-1]
    try:
        value = int(duration_str[:-1])
    except ValueError:
        return None

    if unit == 'm':
        return value * 60
    elif unit == 'h':
        return value * 3600
    elif unit == 'd':
        return value * 86400
    else:
        return None
# üìå –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî –±–æ—Ç-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä —Ü—å–æ–≥–æ —á–∞—Ç—É.")

# üìå –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return

    help_text = (
        "üõ† *–ê–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∏:*\n"
        "/mute <—á–∞—Å> ‚Äî –∑–∞–º º—é—Ç–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /mute 10m)\n"
        "/unmute ‚Äî –∑–Ω—è—Ç–∏ –º º—é—Ç\n"
        "/ban <—á–∞—Å> ‚Äî –∑–∞–±–∞–Ω–∏—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /ban 1h)\n"
        "/unban <id> ‚Äî —Ä–æ–∑–±–∞–Ω–∏—Ç–∏ –∑–∞ ID\n"
        "/kick ‚Äî –≤–∏–≥–Ω–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n"
        "/clean <N> ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ N –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å\n"
        "/lock ‚Äî –∑–∞–∫—Ä–∏—Ç–∏ —á–∞—Ç (–ª–∏—à–µ —á–∏—Ç–∞–Ω–Ω—è)\n"
        "/unlock ‚Äî –≤—ñ–¥–∫—Ä–∏—Ç–∏ —á–∞—Ç\n"
        "/rules ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞\n"
        "/report @—é–∑–µ—Ä –ø—Ä–∏—á–∏–Ω–∞ ‚Äî –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞–º\n"
        "/admins ‚Äî —Å–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ–≤\n"
        "/addadmin <id> ‚Äî –¥–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω–∞\n"
        "/removeadmin <id> ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞\n"
    )
    await update.message.reply_text(help_text, parse_mode="Markdown")

# üìå –ö–æ–º–∞–Ω–¥–∞ /admins ‚Äî –ø–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ–≤
async def list_admins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_tech_admin(update.effective_user.id):
        return

    dynamic_admins = load_admins()
    tech_list = "\n".join([f"üëë {admin}" for admin in TECH_ADMINS])
    dynamic_list = "\n".join([f"üîß {admin}" for admin in dynamic_admins])
    await update.message.reply_text(f"–°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ–≤:\n{tech_list}\n{dynamic_list}")

# üìå –ö–æ–º–∞–Ω–¥–∞ /addadmin <id>
async def add_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_tech_admin(update.effective_user.id):
        return

    if not context.args:
        return await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /addadmin <user_id>")

    try:
        user_id = int(context.args[0])
    except ValueError:
        return await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID")

    admins = load_admins()
    if user_id not in admins:
        admins.append(user_id)
        save_admins(admins)
        await update.message.reply_text(f"‚úÖ –ê–¥–º—ñ–Ω–∞ –¥–æ–¥–∞–Ω–æ: {user_id}")
    else:
        await update.message.reply_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —î –∞–¥–º—ñ–Ω–æ–º.")

# üìå –ö–æ–º–∞–Ω–¥–∞ /removeadmin <id>
async def remove_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_tech_admin(update.effective_user.id):
        return

    if not context.args:
        return await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /removeadmin <user_id>")

    try:
        user_id = int(context.args[0])
    except ValueError:
        return await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID")

    admins = load_admins()
    if user_id in admins:
        admins.remove(user_id)
        save_admins(admins)
        await update.message.reply_text(f"‚ùå –ê–¥–º—ñ–Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–æ: {user_id}")
    else:
        await update.message.reply_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —î –∞–¥–º—ñ–Ω–æ–º.")
# üìå –ö–æ–º–∞–Ω–¥–∞ /mute 10m (–≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
async def mute(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return

    if not update.message.reply_to_message:
        return await update.message.reply_text("üîá –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ —Ç—Ä–µ–±–∞ –∑–∞–º º—é—Ç–∏—Ç–∏.")

    if not context.args:
        return await update.message.reply_text("‚ùó –í–∫–∞–∂–∏ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –º º—é—Ç—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /mute 10m)")

    seconds = parse_duration(context.args[0])
    if not seconds:
        return await update.message.reply_text("‚õî –§–æ—Ä–º–∞—Ç: 10m, 1h, 2d")

    until = datetime.utcnow() + timedelta(seconds=seconds)
    user_id = update.message.reply_to_message.from_user.id

    await context.bot.restrict_chat_member(
        update.effective_chat.id,
        user_id,
        permissions=ChatPermissions(can_send_messages=False),
        until_date=until
    )
    await update.message.reply_text(f"üîá –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–º º—é—á–µ–Ω–æ –Ω–∞ {context.args[0]}")

# üìå –ö–æ–º–∞–Ω–¥–∞ /unmute (–≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
async def unmute(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return

    if not update.message.reply_to_message:
        return await update.message.reply_text("üîä –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ —Ç—Ä–µ–±–∞ —Ä–æ–∑–º º—é—Ç–∏—Ç–∏.")

    user_id = update.message.reply_to_message.from_user.id

    await context.bot.restrict_chat_member(
        update.effective_chat.id,
        user_id,
        permissions=ChatPermissions(
            can_send_messages=True,
            can_send_media_messages=True,
            can_send_other_messages=True,
            can_add_web_page_previews=True,
        )
    )
    await update.message.reply_text("üîä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ä–æ–∑–º º—é—á–µ–Ω–æ.")

# üìå –ö–æ–º–∞–Ω–¥–∞ /ban 1d (–≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
async def ban(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id
    user_id = update.message.reply_to_message.from_user.id

    if not context.args:
        return await update.message.reply_text("‚è≥ –í–∫–∞–∂–∏ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –±–∞–Ω–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /ban 1d)")

    seconds = parse_duration(context.args[0])
    if not seconds:
        return await update.message.reply_text("‚õî –§–æ—Ä–º–∞—Ç: 10m, 1h, 2d")

    until = datetime.utcnow() + timedelta(seconds=seconds)

    await context.bot.ban_chat_member(
        update.effective_chat.id,
        user_id,
        until_date=until
    )
    await update.message.reply_text(f"üö´ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–±–∞–Ω–µ–Ω–æ –Ω–∞ {context.args[0]}")

# üìå –ö–æ–º–∞–Ω–¥–∞ /unban user_id
async def unban(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return

    if not context.args:
        return await update.message.reply_text("üë§ –í–∫–∞–∂–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: /unban <user_id>")

    try:
        user_id = int(context.args[0])
    except ValueError:
        return await update.message.reply_text("‚ùó ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º")

    await context.bot.unban_chat_member(update.effective_chat.id, user_id)
    await update.message.reply_text("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ä–æ–∑–±–∞–Ω–µ–Ω–æ")

# üìå –ö–æ–º–∞–Ω–¥–∞ /kick (–≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
async def kick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return

    if not update.message.reply_to_message:
        return await update.message.reply_text("üë¢ –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ —Ç—Ä–µ–±–∞ –≤–∏–≥–Ω–∞—Ç–∏.")

    user_id = update.message.reply_to_message.from_user.id
    await context.bot.ban_chat_member(update.effective_chat.id, user_id)
    await context.bot.unban_chat_member(update.effective_chat.id, user_id)
    await update.message.reply_text("üë¢ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∏–≥–Ω–∞–Ω–æ –∑ —á–∞—Ç—É.")
# üìå –ö–æ–º–∞–Ω–¥–∞ /lock ‚Äî –∑–∞–∫—Ä–∏—Ç–∏ —á–∞—Ç
async def lock(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return

    await context.bot.set_chat_permissions(
        update.effective_chat.id,
        permissions=ChatPermissions(can_send_messages=False)
    )
    await update.message.reply_text("üîí –ß–∞—Ç –∑–∞–∫—Ä–∏—Ç–æ. –¢–µ–ø–µ—Ä —Ç—ñ–ª—å–∫–∏ —á–∏—Ç–∞–Ω–Ω—è.")

# üìå –ö–æ–º–∞–Ω–¥–∞ /unlock ‚Äî –≤—ñ–¥–∫—Ä–∏—Ç–∏ —á–∞—Ç
async def unlock(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return

    await context.bot.set_chat_permissions(
        update.effective_chat.id,
        permissions=ChatPermissions(
            can_send_messages=True,
            can_send_media_messages=True,
            can_send_other_messages=True,
            can_add_web_page_previews=True,
        )
    )
    await update.message.reply_text("üîì –ß–∞—Ç –≤—ñ–¥–∫—Ä–∏—Ç–æ. –í—Å—ñ –º–æ–∂—É—Ç—å –ø–∏—Å–∞—Ç–∏.")
# üìå –ö–æ–º–∞–Ω–¥–∞ /clean N ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ N –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def clean(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return

    if not context.args:
        return await update.message.reply_text("üßπ –í–∫–∞–∂–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: /clean 10")

    try:
        count = int(context.args[0])
    except ValueError:
        return await update.message.reply_text("‚ùó –¶–µ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ.")

    messages = []
    async for msg in update.effective_chat.get_history(limit=count + 1):
        messages.append(msg.message_id)

    for msg_id in messages:
        try:
            await context.bot.delete_message(update.effective_chat.id, msg_id)
        except:
            continue

    await update.message.reply_text(f"üßº –í–∏–¥–∞–ª–µ–Ω–æ {count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.")
# üìå –ö–æ–º–∞–Ω–¥–∞ /rules ‚Äî –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞ –∑ —Ñ–∞–π–ª—É
async def rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        with open("rules.txt", "r", encoding="utf-8") as f:
            text = f.read()
        await update.message.reply_text(text)
    except FileNotFoundError:
        await update.message.reply_text("üìÑ –§–∞–π–ª –∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

# üìå –ö–æ–º–∞–Ω–¥–∞ /report @user –ø—Ä–∏—á–∏–Ω–∞
async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        return await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /report @username –ø—Ä–∏—á–∏–Ω–∞")

    reason = ' '.join(context.args)
    reporter = update.effective_user.mention_html()

    admin_ids = TECH_ADMINS + load_admins()
    mentions = [f"<a href='tg://user?id={admin_id}'>–∞–¥–º—ñ–Ω</a>" for admin_id in admin_ids]
    mention_text = ", ".join(mentions)

    await update.message.reply_html(
        f"üö® –†–µ–ø–æ—Ä—Ç –≤—ñ–¥ {reporter}:\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\nüîî {mention_text}"
    )

# üìå –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤ + –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø—Ä–∞–≤–∏–ª
async def welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    for member in update.message.new_chat_members:
        await update.message.reply_text(
            f"üëã –í—ñ—Ç–∞—î–º–æ, {member.full_name}!\nüìú –û—Å—å –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç—É:"
        )
        try:
            with open("rules.txt", "r", encoding="utf-8") as f:
                text = f.read()
            await update.message.reply_text(text)
        except FileNotFoundError:
            await update.message.reply_text("üìÑ –§–∞–π–ª –∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

# ‚ñ∂Ô∏è –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # üß† –ê–¥–º—ñ–Ω/—Å–∏—Å—Ç–µ–º–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("admins", list_admins))
    app.add_handler(CommandHandler("addadmin", add_admin))
    app.add_handler(CommandHandler("removeadmin", remove_admin))

    # üëÆ –ú–æ–¥–µ—Ä–∞—Ü—ñ—è
    app.add_handler(CommandHandler("mute", mute))
    app.add_handler(CommandHandler("unmute", unmute))
    app.add_handler(CommandHandler("ban", ban))
    app.add_handler(CommandHandler("unban", unban))
    app.add_handler(CommandHandler("kick", kick))
    app.add_handler(CommandHandler("clean", clean))
    app.add_handler(CommandHandler("lock", lock))
    app.add_handler(CommandHandler("unlock", unlock))

    # üìù –Ü–Ω—à–µ
    app.add_handler(CommandHandler("rules", rules))
    app.add_handler(CommandHandler("report", report))

    # üëã –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –Ω–æ–≤–∞—á–∫—ñ–≤
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome))

    # üöÄ –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ.")
    app.run_polling()

if __name__ == '__main__':
    main()

